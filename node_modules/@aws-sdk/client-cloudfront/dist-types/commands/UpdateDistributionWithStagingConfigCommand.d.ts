import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CloudFrontClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CloudFrontClient";
import { UpdateDistributionWithStagingConfigRequest, UpdateDistributionWithStagingConfigResult } from "../models/models_1";
export interface UpdateDistributionWithStagingConfigCommandInput extends UpdateDistributionWithStagingConfigRequest {
}
export interface UpdateDistributionWithStagingConfigCommandOutput extends UpdateDistributionWithStagingConfigResult, __MetadataBearer {
}
/**
 * <p>Copies the staging distribution's configuration to its corresponding primary
 * 			distribution. The primary distribution retains its <code>Aliases</code> (also known as
 * 			alternate domain names or CNAMEs) and <code>ContinuousDeploymentPolicyId</code> value,
 * 			but otherwise its configuration is overwritten to match the staging distribution.</p>
 *          <p>You can use this operation in a continuous deployment workflow after you have tested
 * 			configuration changes on the staging distribution. After using a continuous deployment
 * 			policy to move a portion of your domain name's traffic to the staging distribution and
 * 			verifying that it works as intended, you can use this operation to copy the staging
 * 			distribution's configuration to the primary distribution. This action will disable the
 * 			continuous deployment policy and move your domain's traffic back to the primary distribution.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CloudFrontClient, UpdateDistributionWithStagingConfigCommand } from "@aws-sdk/client-cloudfront"; // ES Modules import
 * // const { CloudFrontClient, UpdateDistributionWithStagingConfigCommand } = require("@aws-sdk/client-cloudfront"); // CommonJS import
 * const client = new CloudFrontClient(config);
 * const command = new UpdateDistributionWithStagingConfigCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link UpdateDistributionWithStagingConfigCommandInput} for command's `input` shape.
 * @see {@link UpdateDistributionWithStagingConfigCommandOutput} for command's `response` shape.
 * @see {@link CloudFrontClientResolvedConfig | config} for CloudFrontClient's `config` shape.
 *
 */
export declare class UpdateDistributionWithStagingConfigCommand extends $Command<UpdateDistributionWithStagingConfigCommandInput, UpdateDistributionWithStagingConfigCommandOutput, CloudFrontClientResolvedConfig> {
    readonly input: UpdateDistributionWithStagingConfigCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: UpdateDistributionWithStagingConfigCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CloudFrontClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDistributionWithStagingConfigCommandInput, UpdateDistributionWithStagingConfigCommandOutput>;
    private serialize;
    private deserialize;
}
